# -*- coding: utf-8 -*-
"""AIQoD_task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ufTRVEGJcev3lAj7Au0fXYjBW7RLPEoa

Complete Code for Preprocessing, Training, and Generating Predictions


Step 1: Import Libraries
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import roc_auc_score
from scipy.sparse import hstack
import random

"""Step 2: Load the Data"""

# Load the data
train_data = pd.read_csv('/content/sample_data/train.csv')
train_labels = pd.read_csv('/content/sample_data/trainLabels.csv')
test_data = pd.read_csv('/content/sample_data/test.csv')

train_data

"""Step 3: Preprocess the Data"""

# Assume 'text_column' is the column containing text data
text_column = 'text_column'

# Bag of Words Vectorizer
bow_vectorizer = CountVectorizer(max_features=1000)
X_bow_train = bow_vectorizer.fit_transform(train_data[text_column])
X_bow_test = bow_vectorizer.transform(test_data[text_column])

# TF-IDF Vectorizer
tfidf_vectorizer = TfidfVectorizer(max_features=1000)
X_tfidf_train = tfidf_vectorizer.fit_transform(train_data[text_column])
X_tfidf_test = tfidf_vectorizer.transform(test_data[text_column])

# Combine text features
X_text_train = hstack([X_bow_train, X_tfidf_train])
X_text_test = hstack([X_bow_test, X_tfidf_test])

# Extract other features from train and test data
numerical_features = train_data.select_dtypes(include=[np.number]).columns.tolist()
categorical_features = train_data.select_dtypes(include=[np.object]).columns.tolist()
boolean_features = [col for col in train_data.columns if train_data[col].nunique() == 2]

# Scale numerical features
scaler = StandardScaler()
X_numerical_train = scaler.fit_transform(train_data[numerical_features])
X_numerical_test = scaler.transform(test_data[numerical_features])

# Encode categorical features
X_categorical_train = pd.get_dummies(train_data[categorical_features])
X_categorical_test = pd.get_dummies(test_data[categorical_features])

# Ensure same columns in train and test
X_categorical_train, X_categorical_test = X_categorical_train.align(X_categorical_test, join='inner', axis=1)

# Encode boolean features
X_boolean_train = train_data[boolean_features].replace({'YES': 1, 'NO': 0})
X_boolean_test = test_data[boolean_features].replace({'YES': 1, 'NO': 0})

# Combine all features
X_train_combined = hstack([X_text_train, X_numerical_train, X_categorical_train, X_boolean_train])
X_test_combined = hstack([X_text_test, X_numerical_test, X_categorical_test, X_boolean_test])

# Prepare labels for multilabel classification
mlb = MultiLabelBinarizer()
y = mlb.fit_transform(train_labels.values)

"""Step 4: Split the Data"""

X_train, X_val, y_train, y_val = train_test_split(X_combined, y, test_size=0.2, random_state=42)

"""Step 5: Train the Model"""

# Initialize and train the model
model = LogisticRegression(max_iter=1000, solver='lbfgs', multi_class='ovr')
model.fit(X_train, y_train)

"""Step 6: Evaluate the Model"""

# Make predictions
y_pred = model.predict_proba(X_val)

# Compute ROC AUC score for each label
auc_scores = roc_auc_score(y_val, y_pred, average=None)
print(f'ROC AUC scores: {auc_scores}')

"""Step 7: Make Predictions on Test Data and Prepare Submission File"""

# Make predictions
test_pred = model.predict_proba(X_test_combined)

# Prepare the submission file in two columns
submission_data = []
for i, probs in enumerate(test_pred):
    for j, prob in enumerate(probs):
        submission_data.append((f'{i+1}_label_{j+1}', prob))

submission = pd.DataFrame(submission_data, columns=['id_label', 'probability'])
submission.to_csv('submission.csv', index=False)
print(submission.head(10))